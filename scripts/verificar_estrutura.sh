#!/bin/bash

# ===================================================================================
# VERIFICADOR DE ESTRUTURA - SISTEMA DE AN√ÅLISE DE LOGS
# ===================================================================================
# Script para verificar e validar a estrutura do projeto
# Autor: Jackson Savoldi | ACADe-TI - Aula 04
# ===================================================================================

# Carrega configura√ß√£o centralizada
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
source "$PROJECT_ROOT/config/paths.conf"

# Cores
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
CYAN="\e[36m"
WHITE="\e[37m"
BOLD="\e[1m"
RESET="\e[0m"

# Contadores
TOTAL_ITEMS=0
EXISTING_ITEMS=0
MISSING_ITEMS=0

# Fun√ß√£o para verificar diret√≥rio
check_dir() {
    local dir="$1"
    local description="$2"
    local required="${3:-false}"
    
    ((TOTAL_ITEMS++))
    
    if [[ -d "$dir" ]]; then
        local file_count=$(find "$dir" -type f 2>/dev/null | wc -l)
        local dir_count=$(find "$dir" -type d 2>/dev/null | wc -l)
        ((dir_count--)) # Remove o pr√≥prio diret√≥rio da contagem
        
        echo -e "${GREEN}‚úÖ $description${RESET}"
        echo -e "   üìÅ $dir"
        echo -e "   üìä $file_count arquivos, $dir_count subdiret√≥rios"
        ((EXISTING_ITEMS++))
    else
        if [[ "$required" == "true" ]]; then
            echo -e "${RED}‚ùå $description (OBRIGAT√ìRIO)${RESET}"
            echo -e "   üìÅ $dir"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $description (OPCIONAL)${RESET}"
            echo -e "   üìÅ $dir"
        fi
        ((MISSING_ITEMS++))
    fi
}

# Fun√ß√£o para verificar arquivo
check_file() {
    local file="$1"
    local description="$2"
    local required="${3:-false}"
    
    ((TOTAL_ITEMS++))
    
    if [[ -f "$file" ]]; then
        local size=$(du -h "$file" 2>/dev/null | cut -f1)
        echo -e "${GREEN}‚úÖ $description${RESET}"
        echo -e "   üìÑ $file ($size)"
        ((EXISTING_ITEMS++))
    else
        if [[ "$required" == "true" ]]; then
            echo -e "${RED}‚ùå $description (OBRIGAT√ìRIO)${RESET}"
            echo -e "   üìÑ $file"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $description (OPCIONAL)${RESET}"
            echo -e "   üìÑ $file"
        fi
        ((MISSING_ITEMS++))
    fi
}

# Fun√ß√£o para mostrar estat√≠sticas
show_statistics() {
    echo -e "\n${CYAN}${BOLD}üìä ESTAT√çSTICAS DA VERIFICA√á√ÉO${RESET}"
    echo -e "${CYAN}${BOLD}==============================${RESET}"
    echo -e "‚Ä¢ ${BOLD}Total verificado:${RESET} $TOTAL_ITEMS itens"
    echo -e "‚Ä¢ ${GREEN}${BOLD}Encontrados:${RESET} $EXISTING_ITEMS itens"
    echo -e "‚Ä¢ ${RED}${BOLD}Ausentes:${RESET} $MISSING_ITEMS itens"
    
    if [[ $MISSING_ITEMS -eq 0 ]]; then
        echo -e "\n${GREEN}${BOLD}üéâ Estrutura completa! Todos os itens est√£o presentes.${RESET}"
    else
        local percentage=$(( (EXISTING_ITEMS * 100) / TOTAL_ITEMS ))
        echo -e "\n${YELLOW}${BOLD}üìà Completo: ${percentage}%${RESET}"
    fi
}

# Fun√ß√£o para mostrar estrutura visual
show_structure() {
    echo -e "\n${CYAN}${BOLD}üå≥ ESTRUTURA DO PROJETO${RESET}"
    echo -e "${CYAN}${BOLD}=======================${RESET}"
    
    cat << 'EOF'
logs/                                    # PROJETO PRINCIPAL
‚îú‚îÄ‚îÄ üìÅ config/                          # CONFIGURA√á√ïES
‚îÇ   ‚îú‚îÄ‚îÄ main.conf                       # Configura√ß√£o principal
‚îÇ   ‚îú‚îÄ‚îÄ paths.conf                      # Caminhos do projeto
‚îÇ   ‚îú‚îÄ‚îÄ patterns.conf                   # Padr√µes de detec√ß√£o
‚îÇ   ‚îî‚îÄ‚îÄ attack_patterns_learning.conf   # Padr√µes de aprendizado
‚îÇ
‚îú‚îÄ‚îÄ üìÅ src/                             # C√ìDIGO FONTE
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ scripts/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ core/                    # Scripts principais
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/                   # Utilit√°rios
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ generators/              # Geradores
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ modules/                     # M√≥dulos espec√≠ficos
‚îÇ
‚îú‚îÄ‚îÄ üìÅ analogs/                         # LOGS PARA AN√ÅLISE
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/                    # Logs de servi√ßos
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ attacks/                     # Logs de ataques
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ examples/                    # Exemplos de logs
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ realistic/                   # Logs realistas
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ custom/                      # Logs customizados
‚îÇ
‚îú‚îÄ‚îÄ üìÅ payloads/                        # PAYLOADS PARA DESENVOLVIMENTO
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ sql-injection-payload-list/
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ xss/
‚îÇ
‚îú‚îÄ‚îÄ üìÅ results/                         # RESULTADOS
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ analysis/                    # Resultados de an√°lises
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ reports/                     # Relat√≥rios gerados
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ exports/                     # Dados exportados
‚îÇ
‚îú‚îÄ‚îÄ üìÅ system/                          # SISTEMA DE TREINAMENTO
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ import/                  # Dados de entrada
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ export/                  # Dados exportados
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ templates/               # Templates
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ backup/                      # Backups
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ logs/                        # Logs do sistema
‚îÇ
‚îú‚îÄ‚îÄ üìÅ tests/                           # TESTES
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ unit/                        # Testes unit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ integration/                 # Testes de integra√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ performance/                 # Testes de performance
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ results/                     # Resultados dos testes
‚îÇ
‚îú‚îÄ‚îÄ üìÅ docs/                            # DOCUMENTA√á√ÉO
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ user/                        # Documenta√ß√£o para usu√°rios
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ developer/                   # Documenta√ß√£o para desenvolvedores
‚îÇ
‚îú‚îÄ‚îÄ üìÅ temp/                            # ARQUIVOS TEMPOR√ÅRIOS
‚îú‚îÄ‚îÄ üìÅ scripts/                         # SCRIPTS DE AUTOMA√á√ÉO
‚îú‚îÄ‚îÄ üìÅ logs/                            # LOGS DO SISTEMA
‚îî‚îÄ‚îÄ üìÅ compilado/                       # VERS√ïES COMPILADAS (FUTURO)
EOF
}

# Fun√ß√£o principal
main() {
    echo -e "${BOLD}${CYAN}üîç VERIFICADOR DE ESTRUTURA - SISTEMA DE AN√ÅLISE DE LOGS${RESET}"
    echo -e "${BOLD}${CYAN}=====================================================${RESET}"
    echo -e "${BOLD}ACADe-TI - Aula 04 (28/06/2025)${RESET}"
    echo -e "${BOLD}Autor: Jackson Savoldi | Professor: Erick Martinez${RESET}"
    echo -e "${BOLD}Diret√≥rio raiz: $PROJECT_ROOT${RESET}\n"
    
    echo -e "${CYAN}${BOLD}üìÅ VERIFICANDO DIRET√ìRIOS PRINCIPAIS${RESET}"
    echo -e "${CYAN}${BOLD}===================================${RESET}"
    
    # Diret√≥rios principais (obrigat√≥rios)
    check_dir "$CONFIG_DIR" "Configura√ß√µes do sistema" "true"
    check_dir "$SRC_DIR" "C√≥digo fonte" "true"
    check_dir "$ANALOGS_DIR" "Logs para an√°lise" "true"
    check_dir "$RESULTS_DIR" "Resultados" "true"
    check_dir "$SYSTEM_DIR" "Sistema de treinamento" "true"
    check_dir "$PAYLOADS_DIR" "Payloads para desenvolvimento" "true"
    check_dir "$TEMP_DIR" "Arquivos tempor√°rios" "true"
    check_dir "$LOGS_DIR" "Logs do sistema" "true"
    check_dir "$DOCS_DIR" "Documenta√ß√£o" "true"
    check_dir "$TESTS_DIR" "Testes" "true"
    check_dir "$SCRIPTS_DIR" "Scripts de automa√ß√£o" "true"
    
    echo -e "\n${CYAN}${BOLD}üìÅ VERIFICANDO SUBDIRET√ìRIOS${RESET}"
    echo -e "${CYAN}${BOLD}============================${RESET}"
    
    # Subdiret√≥rios do src
    check_dir "$SRC_SCRIPTS_DIR" "Scripts do c√≥digo fonte"
    check_dir "$SRC_CORE_DIR" "Scripts principais"
    check_dir "$SRC_UTILS_DIR" "Utilit√°rios"
    check_dir "$SRC_GENERATORS_DIR" "Geradores"
    
    # Subdiret√≥rios do analogs
    check_dir "$ANALOGS_SERVICES_DIR" "Logs de servi√ßos"
    check_dir "$ANALOGS_ATTACKS_DIR" "Logs de ataques"
    check_dir "$ANALOGS_EXAMPLES_DIR" "Exemplos de logs"
    check_dir "$ANALOGS_REALISTIC_DIR" "Logs realistas"
    check_dir "$ANALOGS_CUSTOM_DIR" "Logs customizados"
    
    # Subdiret√≥rios do results
    check_dir "$RESULTS_ANALYSIS_DIR" "Resultados de an√°lises"
    check_dir "$RESULTS_REPORTS_DIR" "Relat√≥rios gerados"
    check_dir "$RESULTS_EXPORTS_DIR" "Dados exportados"
    
    # Subdiret√≥rios do system
    check_dir "$SYSTEM_DATA_DIR" "Dados do sistema"
    check_dir "$SYSTEM_IMPORT_DIR" "Dados de importa√ß√£o"
    check_dir "$SYSTEM_EXPORT_DIR" "Dados de exporta√ß√£o"
    check_dir "$SYSTEM_TEMPLATES_DIR" "Templates"
    check_dir "$SYSTEM_BACKUP_DIR" "Backups"
    check_dir "$SYSTEM_LOGS_DIR" "Logs do sistema"
    
    # Subdiret√≥rios do tests
    check_dir "$TESTS_UNIT_DIR" "Testes unit√°rios"
    check_dir "$TESTS_INTEGRATION_DIR" "Testes de integra√ß√£o"
    check_dir "$TESTS_PERFORMANCE_DIR" "Testes de performance"
    check_dir "$TESTS_RESULTS_DIR" "Resultados dos testes"
    
    # Subdiret√≥rios do docs
    check_dir "$DOCS_USER_DIR" "Documenta√ß√£o para usu√°rios"
    check_dir "$DOCS_DEVELOPER_DIR" "Documenta√ß√£o para desenvolvedores"
    
    # Subdiret√≥rios do temp
    check_dir "$TEMP_CACHE_DIR" "Cache tempor√°rio"
    check_dir "$TEMP_DOWNLOADS_DIR" "Downloads tempor√°rios"
    check_dir "$TEMP_PROCESSING_DIR" "Processamento tempor√°rio"
    
    echo -e "\n${CYAN}${BOLD}üìÑ VERIFICANDO ARQUIVOS DE CONFIGURA√á√ÉO${RESET}"
    echo -e "${CYAN}${BOLD}========================================${RESET}"
    
    # Arquivos de configura√ß√£o (obrigat√≥rios)
    check_file "$MAIN_CONFIG_FILE" "Configura√ß√£o principal" "true"
    check_file "$PATTERNS_CONFIG_FILE" "Configura√ß√£o de padr√µes" "true"
    check_file "$ATTACK_PATTERNS_FILE" "Padr√µes de aprendizado" "true"
    
    # Arquivos de configura√ß√£o de caminhos
    check_file "$CONFIG_DIR/paths.conf" "Configura√ß√£o de caminhos" "true"
    
    echo -e "\n${CYAN}${BOLD}üìÑ VERIFICANDO SCRIPT PRINCIPAL${RESET}"
    echo -e "${CYAN}${BOLD}==============================${RESET}"
    
    # Scripts principais
    check_file "$SRC_CORE_DIR/scriptlogs.sh" "Script principal"
    check_file "$SRC_CORE_DIR/scriptlogs_avancado.sh" "Script avan√ßado"
    check_file "$SRC_UTILS_DIR/config_loader.sh" "Carregador de configura√ß√£o"
    check_file "$SRC_UTILS_DIR/csv_to_training_system.sh" "Conversor CSV"
    
    # Mostrar estat√≠sticas
    show_statistics
    
    # Mostrar estrutura visual
    show_structure
    
    echo -e "\n${CYAN}${BOLD}üí° COMANDOS √öTEIS${RESET}"
    echo -e "${CYAN}${BOLD}================${RESET}"
    echo -e "‚Ä¢ ${GREEN}cd $ANALOGS_DIR${RESET} - Navegar para logs de an√°lise"
    echo -e "‚Ä¢ ${GREEN}cd $RESULTS_DIR${RESET} - Ver resultados"
    echo -e "‚Ä¢ ${GREEN}cd $PAYLOADS_DIR${RESET} - Ver payloads"
    echo -e "‚Ä¢ ${GREEN}cd $DOCS_USER_DIR${RESET} - Ver documenta√ß√£o do usu√°rio"
    echo -e "‚Ä¢ ${GREEN}ls -la $ANALOGS_ATTACKS_DIR${RESET} - Listar logs de ataques"
    echo -e "‚Ä¢ ${GREEN}ls -la $RESULTS_REPORTS_DIR${RESET} - Listar relat√≥rios"
}

# Executar fun√ß√£o principal
main "$@" 