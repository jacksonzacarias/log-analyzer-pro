#!/bin/bash

# ===================================================================================
# CARREGADOR DE CONFIGURA√á√ÉO - SISTEMA DE AN√ÅLISE DE LOGS
# ===================================================================================
# Utilit√°rio para carregar configura√ß√µes de forma centralizada
# Autor: Jackson Savoldi | ACADe-TI - Aula 04
# ===================================================================================

# Cores para output
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
CYAN="\e[36m"
WHITE="\e[37m"
BOLD="\e[1m"
RESET="\e[0m"

# Vari√°veis globais
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../../" && pwd)"

# Fun√ß√£o para carregar configura√ß√£o de forma segura
load_config_safely() {
    local config_file="$1"
    local config_type="$2"
    
    if [[ ! -f "$config_file" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Arquivo de configura√ß√£o n√£o encontrado: $config_file${RESET}"
        return 1
    fi
    
    case "$config_type" in
        "patterns")
            load_patterns_config "$config_file"
            ;;
        "main")
            load_main_config "$config_file"
            ;;
        "paths")
            load_paths_config "$config_file"
            ;;
        *)
            echo -e "${RED}‚ùå Tipo de configura√ß√£o desconhecido: $config_type${RESET}"
            return 1
            ;;
    esac
}

# Fun√ß√£o para carregar configura√ß√£o de caminhos
load_paths_config() {
    local config_file="$1"
    
    if [[ -z "$config_file" ]]; then
        # Tenta encontrar o arquivo de configura√ß√£o automaticamente
        local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        local project_root="$(cd "$script_dir/../../.." && pwd)"
        config_file="$project_root/config/paths.conf"
    fi
    
    if [[ -f "$config_file" ]]; then
        # Carrega configura√ß√µes de forma segura, sem executar o arquivo
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Pula coment√°rios e linhas vazias
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$line" ]] && continue
            
            # Processa apenas linhas que cont√™m atribui√ß√µes
            if [[ "$line" =~ ^[[:space:]]*[A-Z_][A-Z0-9_]*[[:space:]]*=[[:space:]]* ]]; then
                # Remove espa√ßos extras e executa a atribui√ß√£o
                eval "$line"
            fi
        done < "$config_file"
        
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "${GREEN}${BOLD}‚úÖ Configura√ß√£o carregada: $config_file${RESET}"
        fi
        return 0
    else
        echo -e "${RED}${BOLD}‚ùå Arquivo de configura√ß√£o n√£o encontrado: $config_file${RESET}"
        return 1
    fi
}

# Fun√ß√£o para carregar configura√ß√£o principal
load_main_config() {
    local config_file="$1"
    
    if [[ -z "$config_file" ]]; then
        config_file="$MAIN_CONFIG_FILE"
    fi
    
    if [[ -f "$config_file" ]]; then
        # Carrega configura√ß√µes de forma segura, sem executar o arquivo
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Pula coment√°rios e linhas vazias
            [[ "$line" =~ ^[[:space:]]*# ]] && continue
            [[ -z "$line" ]] && continue
            
            # Processa apenas linhas que cont√™m atribui√ß√µes
            if [[ "$line" =~ ^[[:space:]]*[A-Z_][A-Z0-9_]*[[:space:]]*=[[:space:]]* ]]; then
                # Remove espa√ßos extras e executa a atribui√ß√£o
                eval "$line"
            fi
        done < "$config_file"
        
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "${GREEN}${BOLD}‚úÖ Configura√ß√£o principal carregada: $config_file${RESET}"
        fi
        return 0
    else
        echo -e "${YELLOW}${BOLD}‚ö†Ô∏è  Arquivo de configura√ß√£o principal n√£o encontrado: $config_file${RESET}"
        return 1
    fi
}

# Fun√ß√£o para carregar configura√ß√£o de padr√µes
load_patterns_config() {
    local config_file="$1"
    echo "  üìã Carregando padr√µes de ataque..."
    
    if [[ ! -f "$config_file" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Arquivo de padr√µes n√£o encontrado${RESET}"
        return 1
    fi
    
    # Inicializa arrays
    PATTERNS=()
    SEVERITIES=()
    DESCRIPTIONS=()
    SCORES=()
    TAGS=()
    
    local line_number=0
    local patterns_loaded=0
    
    while IFS= read -r line || [[ -n "$line" ]]; do
        ((line_number++))
        # Pula coment√°rios e linhas vazias
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ -z "$line" ]] && continue
        # Espera formato: regex|SEVERIDADE|descri√ß√£o|pontua√ß√£o|tags
        IFS='|' read -r pattern severity description score tags <<< "$line"
        # Remove espa√ßos extras
        pattern="${pattern//\"/}"
        severity="${severity//\"/}"
        description="${description//\"/}"
        score="${score//\"/}"
        tags="${tags//\"/}"
        # Valida campos obrigat√≥rios
        if [[ -n "$pattern" && -n "$severity" && -n "$description" ]]; then
            PATTERNS+=("$pattern")
            SEVERITIES+=("$severity")
            DESCRIPTIONS+=("$description")
            SCORES+=("${score:-0}")
            TAGS+=("${tags:-}")
            ((patterns_loaded++))
        else
            echo -e "${YELLOW}‚ö†Ô∏è Linha $line_number: Formato inv√°lido${RESET}"
        fi
    done < "$config_file"
    
    echo "  ‚úÖ $patterns_loaded padr√µes carregados"
    return 0
}

# Fun√ß√£o para carregar todas as configura√ß√µes
load_all_configs() {
    local verbose="${1:-false}"
    VERBOSE="$verbose"
    
    echo -e "${CYAN}${BOLD}üîß CARREGANDO CONFIGURA√á√ïES DO SISTEMA${RESET}"
    echo -e "${CYAN}${BOLD}=====================================${RESET}"
    
    # Carrega configura√ß√£o de caminhos primeiro
    if ! load_paths_config; then
        echo -e "${RED}${BOLD}‚ùå Falha ao carregar configura√ß√£o de caminhos${RESET}"
        return 1
    fi
    
    # Carrega outras configura√ß√µes
    load_main_config
    load_patterns_config
    
    echo -e "${GREEN}${BOLD}‚úÖ Todas as configura√ß√µes carregadas com sucesso${RESET}"
    return 0
}

# Fun√ß√£o para verificar se todos os diret√≥rios necess√°rios existem
verify_directories() {
    local missing_dirs=()
    
    echo -e "${CYAN}${BOLD}üìÅ VERIFICANDO ESTRUTURA DE DIRET√ìRIOS${RESET}"
    echo -e "${CYAN}${BOLD}=====================================${RESET}"
    
    # Lista de diret√≥rios essenciais
    local essential_dirs=(
        "$CONFIG_DIR"
        "$SRC_DIR"
        "$ANALOGS_DIR"
        "$RESULTS_DIR"
        "$SYSTEM_DIR"
        "$PAYLOADS_DIR"
        "$TEMP_DIR"
        "$LOGS_DIR"
        "$DOCS_DIR"
        "$TESTS_DIR"
        "$SCRIPTS_DIR"
    )
    
    for dir in "${essential_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            missing_dirs+=("$dir")
            echo -e "${RED}‚ùå Diret√≥rio n√£o encontrado: $dir${RESET}"
        else
            echo -e "${GREEN}‚úÖ Diret√≥rio encontrado: $dir${RESET}"
        fi
    done
    
    if [[ ${#missing_dirs[@]} -gt 0 ]]; then
        echo -e "${YELLOW}${BOLD}‚ö†Ô∏è  Diret√≥rios ausentes: ${missing_dirs[*]}${RESET}"
        return 1
    else
        echo -e "${GREEN}${BOLD}‚úÖ Todos os diret√≥rios essenciais encontrados${RESET}"
        return 0
    fi
}

# Fun√ß√£o para criar diret√≥rios ausentes
create_missing_directories() {
    local dirs_to_create=(
        "$RESULTS_ANALYSIS_DIR"
        "$RESULTS_REPORTS_DIR"
        "$RESULTS_EXPORTS_DIR"
        "$TEMP_CACHE_DIR"
        "$TEMP_DOWNLOADS_DIR"
        "$TEMP_PROCESSING_DIR"
        "$COMPILADO_DIR"
    )
    
    echo -e "${CYAN}${BOLD}üìÅ CRIANDO DIRET√ìRIOS AUSENTES${RESET}"
    echo -e "${CYAN}${BOLD}==============================${RESET}"
    
    for dir in "${dirs_to_create[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            echo -e "${GREEN}‚úÖ Criado: $dir${RESET}"
        else
            echo -e "${BLUE}‚ÑπÔ∏è  J√° existe: $dir${RESET}"
        fi
    done
}

# Fun√ß√£o para mostrar informa√ß√µes do projeto
show_project_info() {
    echo -e "${CYAN}${BOLD}üìä INFORMA√á√ïES DO PROJETO${RESET}"
    echo -e "${CYAN}${BOLD}========================${RESET}"
    echo -e "‚Ä¢ ${BOLD}Diret√≥rio raiz:${RESET} $PROJECT_ROOT"
    echo -e "‚Ä¢ ${BOLD}Configura√ß√µes:${RESET} $CONFIG_DIR"
    echo -e "‚Ä¢ ${BOLD}C√≥digo fonte:${RESET} $SRC_DIR"
    echo -e "‚Ä¢ ${BOLD}Logs para an√°lise:${RESET} $ANALOGS_DIR"
    echo -e "‚Ä¢ ${BOLD}Resultados:${RESET} $RESULTS_DIR"
    echo -e "‚Ä¢ ${BOLD}Sistema:${RESET} $SYSTEM_DIR"
    echo -e "‚Ä¢ ${BOLD}Payloads:${RESET} $PAYLOADS_DIR"
    echo -e "‚Ä¢ ${BOLD}Documenta√ß√£o:${RESET} $DOCS_DIR"
    echo -e "‚Ä¢ ${BOLD}Testes:${RESET} $TESTS_DIR"
}

# Fun√ß√£o principal para inicializa√ß√£o
initialize_system() {
    local verbose="${1:-false}"
    
    echo -e "${BOLD}${CYAN}üöÄ INICIALIZANDO SISTEMA DE AN√ÅLISE DE LOGS${RESET}"
    echo -e "${BOLD}${CYAN}============================================${RESET}"
    
    # Carrega todas as configura√ß√µes
    if ! load_all_configs "$verbose"; then
        return 1
    fi
    
    # Verifica diret√≥rios
    if ! verify_directories; then
        echo -e "${YELLOW}${BOLD}‚ö†Ô∏è  Alguns diret√≥rios est√£o ausentes${RESET}"
    fi
    
    # Cria diret√≥rios ausentes
    create_missing_directories
    
    # Mostra informa√ß√µes
    show_project_info
    
    echo -e "${GREEN}${BOLD}‚úÖ Sistema inicializado com sucesso${RESET}"
    return 0
}

# Fun√ß√£o para obter padr√£o por √≠ndice
get_pattern() {
    local index="$1"
    
    if [[ $index -ge 0 && $index -lt ${#PATTERNS[@]} ]]; then
        echo "${PATTERNS[$index]}"
    else
        echo ""
    fi
}

# Fun√ß√£o para obter severidade por √≠ndice
get_severity() {
    local index="$1"
    
    if [[ $index -ge 0 && $index -lt ${#SEVERITIES[@]} ]]; then
        echo "${SEVERITIES[$index]}"
    else
        echo ""
    fi
}

# Fun√ß√£o para obter descri√ß√£o por √≠ndice
get_description() {
    local index="$1"
    
    if [[ $index -ge 0 && $index -lt ${#DESCRIPTIONS[@]} ]]; then
        echo "${DESCRIPTIONS[$index]}"
    else
        echo ""
    fi
}

# Fun√ß√£o para obter pontua√ß√£o por √≠ndice
get_score() {
    local index="$1"
    
    if [[ $index -ge 0 && $index -lt ${#SCORES[@]} ]]; then
        echo "${SCORES[$index]}"
    else
        echo "0"
    fi
}

# Fun√ß√£o para obter tags por √≠ndice
get_tags() {
    local index="$1"
    
    if [[ $index -ge 0 && $index -lt ${#TAGS[@]} ]]; then
        echo "${TAGS[$index]}"
    else
        echo ""
    fi
}

# Fun√ß√£o para obter n√∫mero total de padr√µes
get_pattern_count() {
    echo "${#PATTERNS[@]}"
}

# Fun√ß√£o para buscar padr√µes por tag
find_patterns_by_tag() {
    local search_tag="$1"
    local found_patterns=()
    
    for i in "${!TAGS[@]}"; do
        if [[ "${TAGS[$i]}" == *"$search_tag"* ]]; then
            found_patterns+=("$i")
        fi
    done
    
    echo "${found_patterns[@]}"
}

# Fun√ß√£o para buscar padr√µes por severidade
find_patterns_by_severity() {
    local search_severity="$1"
    local found_patterns=()
    
    for i in "${!SEVERITIES[@]}"; do
        if [[ "${SEVERITIES[$i]}" == "$search_severity" ]]; then
            found_patterns+=("$i")
        fi
    done
    
    echo "${found_patterns[@]}"
}

# Fun√ß√£o para listar todos os padr√µes
list_all_patterns() {
    echo "üìã PADR√ïES CARREGADOS"
    echo "===================="
    
    for i in "${!PATTERNS[@]}"; do
        echo "[$i] ${PATTERNS[$i]}"
        echo "    Severidade: ${SEVERITIES[$i]}"
        echo "    Pontua√ß√£o: ${SCORES[$i]}"
        echo "    Descri√ß√£o: ${DESCRIPTIONS[$i]}"
        echo "    Tags: ${TAGS[$i]}"
        echo
    done
}

# Fun√ß√£o para validar configura√ß√£o
validate_config() {
    echo "üîç Validando configura√ß√£o..."
    
    local errors=0
    
    # Valida padr√µes
    if [[ ${#PATTERNS[@]} -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum padr√£o carregado${RESET}"
        ((errors++))
    else
        echo "  ‚úÖ ${#PATTERNS[@]} padr√µes v√°lidos"
    fi
    
    # Valida severidades
    if [[ ${#SEVERITIES[@]} -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhuma severidade carregada${RESET}"
        ((errors++))
    else
        echo "  ‚úÖ ${#SEVERITIES[@]} severidades v√°lidas"
    fi
    
    # Valida descri√ß√µes
    if [[ ${#DESCRIPTIONS[@]} -eq 0 ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhuma descri√ß√£o carregada${RESET}"
        ((errors++))
    else
        echo "  ‚úÖ ${#DESCRIPTIONS[@]} descri√ß√µes v√°lidas"
    fi
    
    if [[ $errors -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Configura√ß√£o v√°lida${RESET}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è $errors problema(s) encontrado(s)${RESET}"
        return 1
    fi
}

# Fun√ß√£o para mostrar estat√≠sticas
show_config_stats() {
    echo "üìä ESTAT√çSTICAS DA CONFIGURA√á√ÉO"
    echo "==============================="
    
    echo "Padr√µes: ${#PATTERNS[@]}"
    echo "Severidades: ${#SEVERITIES[@]}"
    echo "Descri√ß√µes: ${#DESCRIPTIONS[@]}"
    echo "Pontua√ß√µes: ${#SCORES[@]}"
    echo "Tags: ${#TAGS[@]}"
    
    # Conta severidades
    local critical=0 medium=0 low=0 high=0
    
    for severity in "${SEVERITIES[@]}"; do
        case "$severity" in
            "CR√çTICO"|"10") ((critical++)) ;;
            "ALTO"|"7") ((high++)) ;;
            "M√âDIO"|"4") ((medium++)) ;;
            "BAIXO"|"1") ((low++)) ;;
        esac
    done
    
    echo
    echo "Distribui√ß√£o por Severidade:"
    echo "  Cr√≠tico: $critical"
    echo "  Alto: $high"
    echo "  M√©dio: $medium"
    echo "  Baixo: $low"
}

# Fun√ß√£o principal
main() {
    case "${1:-load}" in
        "load")
            # Inicializa arrays
            PATTERNS=()
            SEVERITIES=()
            DESCRIPTIONS=()
            SCORES=()
            TAGS=()
            
            # Carrega configura√ß√µes
            load_config_safely "$PROJECT_ROOT/config/attack_patterns_learning.conf" "patterns"
            load_config_safely "$PROJECT_ROOT/config/main.conf" "main"
            load_config_safely "$PROJECT_ROOT/config/paths.conf" "paths"
            
            # Valida configura√ß√£o
            validate_config
            ;;
        "list")
            # Carrega e lista padr√µes
            PATTERNS=()
            SEVERITIES=()
            DESCRIPTIONS=()
            SCORES=()
            TAGS=()
            
            load_config_safely "$PROJECT_ROOT/config/attack_patterns_learning.conf" "patterns"
            list_all_patterns
            ;;
        "stats")
            # Carrega e mostra estat√≠sticas
            PATTERNS=()
            SEVERITIES=()
            DESCRIPTIONS=()
            SCORES=()
            TAGS=()
            
            load_config_safely "$PROJECT_ROOT/config/attack_patterns_learning.conf" "patterns"
            show_config_stats
            ;;
        "validate")
            # Valida configura√ß√£o
            PATTERNS=()
            SEVERITIES=()
            DESCRIPTIONS=()
            SCORES=()
            TAGS=()
            
            load_config_safely "$PROJECT_ROOT/config/attack_patterns_learning.conf" "patterns"
            validate_config
            ;;
        "help"|*)
            echo "Uso: $0 [comando]"
            echo
            echo "Comandos:"
            echo "  load     - Carrega todas as configura√ß√µes (padr√£o)"
            echo "  list     - Lista todos os padr√µes carregados"
            echo "  stats    - Mostra estat√≠sticas da configura√ß√£o"
            echo "  validate - Valida a configura√ß√£o"
            echo "  help     - Mostra esta ajuda"
            ;;
    esac
}

# Executa se chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi 